clc; clear;
% Set some cool plot/graphics environments!
c =[ 0 0 1;...
     1 0 1;...
     1 0 0];
set(0,'defaultAxesColorOrder',c);
set(0,'defaultlinelinewidth',2)
set(0,'DefaultAxesFontSize',16)

% Load data
load('intFullData.mat')

% Cross-validation
for subj = 1:8
    % 
    ac = repmat([0.05 0.20 0.32 0.40 0.48 0.60 0.75],9*1,1);
    prop = repmat([zeros(3,1); 0.5*ones(3,1); ones(3,1)],1*1,7);
    ad = repmat( repmat([0.2;0.4;0.7],3,7), 1,1);
    n = repmat([20 22 24 24 24 22 20],9*1,1);
    
    jndD1 = repmat(out.jndD1(9*subj-8:9*subj,:),1,7); %jndD1(9*subj-8:9*subj,:) = [];
    subj_cp = out.cp(9*subj-8:9*subj,:); %subj_cp(9*subj-8:9*subj,:) = [];
    
    
    % Noise ceiling
    nspse = out.pse(9*subj-8:9*subj); %nspse(9*subj-8:9*subj)=[];
    nsjnd = out.jnd(9*subj-8:9*subj); %nsjnd(9*subj-8:9*subj)=[];
    mycp = reshape(subj_cp',7,9,1);
    mcp_ns(9*subj-8:9*subj,:) = mean(mycp,3)';
    pse_ns(9*subj-8:9*subj,1) = mean(reshape(nspse,9,1),2);
    jnd_ns(9*subj-8:9*subj,1) = mean(reshape(nsjnd,9,1),2);
    %}
    
    % Count of subject choice probability
    X = subj_cp .* n;
    jndD1 = out.jndD1(9*subj-8);
    pseD1 = out.pseD1(9*subj-8);
    
    llfree(subj) = sum(sum(...
        X.*log(0.5 * ( 1 + erf(...
        (ac - repmat(nspse,1,7) ) ./...
        sqrt( 2 * repmat(nsjnd,1,7).^2 )...
        ) ) ) + ...
        (n-X).*log(0.5 * ( 1 - erf(...
        (ac - repmat(nspse,1,7) ) ./...
        sqrt( 2 * repmat(nsjnd,1,7).^2 )...
        ) ) )...
        ));
    
    
    llnull(subj) = sum(sum(...
        X.*log(0.5 * ( 1 + erf(...
        (ac - pseD1 ) ./...
        sqrt( 2 * jndD1.^2 )...
        ) ) ) + ...
        (n-X).*log(0.5 * ( 1 - erf(...
        (ac - pseD1 ) ./...
        sqrt( 2 * jndD1.^2 )...
        ) ) )...
        ));
    
    
    mu = @(c,ad) 0.4 ./ (c(1) + 0.5*(0.4 + ad));
    
    fnorm = @(c,ac,ad,jndD1)...
        -sum(sum(...
        X.*log(0.5 * ( 1 + erf(...
        (ac - mu(c,ad) ) ./...
        sqrt( 2 * jndD1.^2 )...
        ) ) ) + ...
        (n-X).*log(0.5 * ( 1 - erf(...
        (ac - mu(c,ad) ) ./...
        sqrt( 2 * jndD1.^2 )...
        ) ) )...
        ));
    
    fun = @(c)fnorm(c,ac,ad,jndD1);
    cnorm(subj,:) = fminsearch( fun, 0.5, optimset('MaxFunEvals',100) );
    llnorm(subj) = -1*fnorm(cnorm(subj,:),ac,ad,jndD1);
    
    llcueavg(subj) = sum(sum(...
        X.*log(0.5 * ( 1 + erf(...
        (ac - 0.5*(0.4+ad) ) ./...
        sqrt( 2 * jndD1^2 )...
        ) ) ) + ...
        (n-X).*log(0.5 * ( 1 - erf(...
        (ac - 0.5*(0.4+ad) ) ./...
        sqrt( 2 * jndD1^2 )...
        ) ) )...
        ));
end

% Comparison intensities
ac = [0.05 0.20 0.32 0.40 0.48 0.60 0.75];
row = 0;
for subj = 1:8
    jndD1 = out.jndD1(9*subj-8);
    pseD1 = out.pseD1(9*subj-8);
    for ad = [0.2 0.4 0.7 0.2 0.4 0.7 0.2 0.4 0.7]
        row = row+1;
        psenorm(row,1) = mu(cnorm(subj,:),ad);
        mcpnorm(row,:) = 0.5 * ( 1+erf( (ac - psenorm(row,1) ) ./ sqrt( 2 * jndD1^2 ) ) );
        
        psecueavg(row,1) = 0.5*(0.4+ad);
        mcpcueavg(row,:) = 0.5 * ( 1+erf( (ac - psecueavg(row,1) ) ./ sqrt( 2 * jndD1^2 ) ) );
        
        rsscpnorm(row) = sum( (mcpnorm(row,:)-out.cp(row,:)).^2 );
        rsspsenorm(row) = sum( (psenorm(row)-out.pse(row)).^2 );
        
        rsscpcueavg(row) = sum( (mcpcueavg(row,:)-out.cp(row,:)).^2 );
        rsspsecueavg(row) = sum( (psecueavg(row)-out.pse(row)).^2 );
        
        mcp_null(row,:) = 0.5 * ( 1 + erf(...
            (ac - pseD1) ./ sqrt(2 * jndD1^2)...
            ));
        
        rsscp_null(row) = sum( (mcp_null(row,:)-out.cp(row,:)).^2 );
        rsspse_null(row) = sum( (0.4-out.pse(row)).^2 );
        rssjnd_null(row) = sum( (jndD1-out.jnd(row)).^2 );
        
        rsscp_ns(row) = sum( (mcp_ns(row,:)-out.cp(row,:)).^2 );
        rsspse_ns(row) = sum( (pse_ns(row)-out.pse(row)).^2 );
        rssjnd_ns(row) = sum( (jnd_ns(row)-out.jnd(row)).^2 );
        
        
    end
end

% Cross-validated R2 across subject
for subj = 1:8
    % Select indices for 9 conditions for a subject
    indx = 9*subj-8 : 9*subj;
    % Extract 9 conditions for that subject
    x = mcpnorm(indx,:);
    y = out.cp(indx,:);
    % Compute r2
    r2(subj) = corr(x(:),y(:))^2;
end

% Load R2 data generated by randomly splitting half (within subject) for
% 100 times
load('int100trialsR2.mat')
[meanrs, ind] = sort(mean(overallR2),'descend');
stdrs = std(overallR2);

% Concatenate individual and across subject CV variance explained
meanrs = [meanrs mean(meanrs) mean(r2)];
stdrs = [stdrs(ind) mean(stdrs) std(r2)/sqrt(8)];

% Plot
subplot(211)

X = smartbar(meanrs,1,0.2,{'S1','S2','S3','S4','S5','S6','S7','S8','avg','CV'},c);
eb = errorbar(X,meanrs,stdrs,'.k','MarkerSize',1e-10); errorbar_tick(eb,0)


for i = 1:1
    x = [X(end)-0.47 X(end)+0.47];
    y = [0.96 0.96];
    plot(x,y,'Color',[0.5 0.5 0.5])
end
axis([-0.6 X(end)+0.5 0 1])
set(gca,'YTick',[0 1])
ylabel('Proportion variance')
box off



clc;
ll = [llnorm; llcueavg]';

aic = -2*ll + 2*[ones(8,1) zeros(8,1)];
bic = -2*ll + log(63)*[ones(8,1) zeros(8,1)];


clear rsscp rsspse rssjnd
for subj = 1:8
    indx = 9*subj-8:9*subj;
    rsscp(subj,:) = mean( [rsscpnorm(indx)' rsscpcueavg(indx)'] );
    rsspse(subj,:) = mean( [rsspsenorm(indx)' rsspsecueavg(indx)'] );
    
    rsscpns(subj) = mean(rsscp_ns(indx));
    rsspsens(subj) = mean(rsspse_ns(indx));
    rssjndns(subj) = mean(rssjnd_ns(indx));
    
    rsscpnull(subj) = mean(rsscp_null(indx));
    rsspsenull(subj) = mean(rsspse_null(indx));
    rssjndnull(subj) = mean(rssjnd_null(indx));
end


% Likelihood ratio test
lrt = -2 * log(ll ./ repmat(llnorm',1,2));


% Printing model selection criteria; generates supplementary table 3
clc;
fprintf('LL\tLRT\tAIC\tBIC\tErrCP\tErrPSE\n')
fprintf(['%0.1f' char(177) '%0.1f\t'...
    '%0.1f' char(177) '%0.1f\t'...
    '%0.1f' char(177) '%0.1f\t'...
    '%0.1f' char(177) '%0.1f\t'...
    '%0.2f' char(177) '%0.2f\t'...
    '%0.3f' char(177) '%0.3f\t'...
    '\n'],...
    [nanmean(ll);nanstd(ll)/sqrt(8);...
    nanmean(lrt);nanstd(lrt)/sqrt(8);...
    nanmean(aic);nanstd(aic)/sqrt(8);...
    nanmean(bic);nanstd(bic)/sqrt(8);...
    nanmean(rsscp);nanstd(rsscp)/sqrt(8);...
    nanmean(rsspse);nanstd(rsspse)/sqrt(8);...
    ])




